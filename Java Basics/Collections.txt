

Generics:
=========
jdk 1.5 version 
ArrayList list = new ArrayList();
list.add("apple");
list.add("mango");
list.add("10");

for(int i=0;i<list.size();i++){
	   String str=(String)list.get(i);
	   sysout(str);
}

- type safety

- type casting

T-Type(user-define or predefine as a class)
E-Element(Array)
K-Key
V-value
N-Number



Bounding Wildcard:


<? extends Bank>



java.lang.Object(c)

  |

java.lang.Number(abs)               java.lang.Character             java.lang.Boolean


 |

java.lang.Integer    java.lang.Byte     java.lang.Short java.lang.Float java.lang.Double  

<? extends Type>

-Here it can allow same and it child class

<? super Type>

-Here it allow same and parent and parent parent classes.


---------------------------------------------------------------------------------------


Date & Calendar 


Date - JDK 1.0


Calendar - JDK 1.1
0-11

java.time - JDK 1.8
1-12



public class Test {

	public static void main(String[] args) {
		Calendar c = new GregorianCalendar();
		System.out.println(c.getTime());
		Calendar cc = Calendar.getInstance();
		System.out.println(cc.getTime());
		//cc.setTimeZone(TimeZone.getTimeZone("Australia/Sydney"));
		TimeZone timezone = cc.getTimeZone();
		System.out.println(timezone.getDisplayName());
		String zoneId[] = timezone.getAvailableIDs();
		for(int  i=0;i<zoneId.length;i++) {
			   if(zoneId[i].equals(cc.getTimeZone().getID())) {
				     System.out.println("Our  TimeZone:"+zoneId[i]);
				     break;
			   	}
		}
		
	}


}






public class Test {

	public static void main(String[] args) throws InterruptedException, ParseException {
	  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm a");
	  String intime = sdf.format(new Date());
	  System.out.println(intime);
	  Thread.sleep(60000);
	  String outtime = sdf.format(new Date());
	  System.out.println(outtime);
	  
	  Date d1  = sdf.parse(intime);
	  Date d2  = sdf.parse(outtime);
	  
	  long diff = Math.abs(d2.getTime() - d1.getTime());
	  System.out.println(diff);
      long sec = (diff)/1000;
      long min = ((diff)/1000)/60;
      System.out.println("seconds:"+sec);
      System.out.println("minutes:"+min);
	  
	  
	  
	}


}







public class Test {

	
	public static void main(String[] args) {
		LocalDateTime ldt = LocalDateTime.now();
		String s = ldt.format(DateTimeFormatter.ofPattern("dd-MM-YYYY HH:mm:ss"));
		System.out.println(s);
	}


}


In how many ways  we are going to create an instance  of the respective class?


Ans:
   There are two ways:

    I.  By using  new operator

    II.By using  newInstance(); (server side application internally used this approach)
        Step1: First load the  class dynamically by using Class.forName(String className);

                Class class = Class.forName("className");




        xml file
public class Test {

	
	public static void main(String[] args) {
	  Scanner scanner  = new Scanner(System.in);
	  int rupee = scanner.nextInt();
	  convertIntoDollarAndPrintIt(rupee);
		
	}

	private static void convertIntoDollarAndPrintIt(int rupee) {
		// TODO Auto-generated method stub
		  double dollar = rupee/73.38;
		  DecimalFormat df = new DecimalFormat("##.##");
		  System.out.println(df.format(dollar)+" "+Currency.getInstance(Locale.US));
		
	}

}
==================================================================================================

			                          IO(Input/Output) Stream

			                          ==========================


Stream: A flow of data which can be transfer from one location to anothe location.


Resources:  Text file, images, audio,video


	File System:
	============

	java.io.File(c)





1. Byte Stream(byte-byte)

			 I. InputStream  -  It deals with byte-byte data
			 		   |-> FileInputStream
			 		   	  |-> text,images,audio,video

			 II.OutputStream - It deals with byte-byte data
			 			|->FileOutputStream
			 				|->text,images,audio,video

2.Character Stream(char-char)


import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

//file1.txt
public class Test {
	public static void main(String[] args) throws IOException, InterruptedException {
		String location = "D:\\a\\myapp";
		File file = new File(location);
		String newLocation = "";
		if (file.isDirectory() == false) {
			if (file.mkdir() == true) {
				newLocation += file.getAbsolutePath() + "\\" + "file1.txt";
				File newFile = new File(newLocation);
				newFile.createNewFile();
				FileOutputStream fos = new FileOutputStream(newLocation);
				String message = "hello";
				fos.write(message.getBytes());
				System.out.println("successfully store the  data into the  file....");
			}
		} else {
			if (file.exists()) {
				// read the data
				System.out.println("read the  data....");
				FileInputStream fis = new FileInputStream("D:\\a\\myapp\\file1.txt");
				byte b[] = new byte[100];
				fis.read(b);
				System.out.println(new String(b));
				// int ch;
				// while((ch = fis.read())!=-1) {
				// System.out.print((char)ch);
				// Thread.sleep(2000);
				// }

				System.out.println("\nsuccesfully read the data from the file...");

			} else {
				System.out.println("no");
			}
		}

	}
}
